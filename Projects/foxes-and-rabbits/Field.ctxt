#BlueJ class context
comment0.target=Field
comment0.text=\n\ The\ world\ contaning\ the\ foxes\ and\ rabbits\ (and\ other\ animals\ you\ might\ like\ to\ create).\n\ \n\ @author\ mik\n\ @version\ 1.0\n
comment1.params=
comment1.target=Field()
comment1.text=\n\ Constructor\ for\ objects\ of\ class\ FoxWorld.\n\ \n
comment2.params=
comment2.target=void\ populate()
comment2.text=\n\ Populate\ a\ field\ with\ foxes\ and\ rabbits.\n\ @param\ field\ The\ field\ to\ be\ populated.\n
comment3.params=x\ y
comment3.target=Location\ randomAdjacentLocation(int,\ int)
comment3.text=\n\ Generate\ a\ random\ location\ that\ is\ adjacent\ to\ the\n\ given\ location,\ or\ is\ the\ same\ location.\n\ The\ returned\ location\ will\ be\ within\ the\ valid\ bounds\n\ of\ the\ field.\n\ @param\ location\ The\ location\ from\ which\ to\ generate\ an\ adjacency.\n\ @return\ A\ valid\ location\ within\ the\ grid\ area.\ This\n\ \ \ \ \ \ \ \ \ may\ be\ the\ same\ object\ as\ the\ location\ parameter.\n
comment4.params=x\ y
comment4.target=Location\ freeAdjacentLocation(int,\ int)
comment4.text=\n\ Try\ to\ find\ a\ free\ location\ that\ is\ adjacent\ to\ the\n\ given\ location.\ If\ there\ is\ none,\ then\ return\ the\ current\n\ location\ if\ it\ is\ free.\ If\ not,\ return\ null.\n\ The\ returned\ location\ will\ be\ within\ the\ valid\ bounds\n\ of\ the\ field.\n\ @param\ location\ The\ location\ from\ which\ to\ generate\ an\ adjacency.\n\ @return\ A\ valid\ location\ within\ the\ grid\ area.\ This\ may\ be\ the\n\ \ \ \ \ \ \ \ \ same\ object\ as\ the\ location\ parameter,\ or\ null\ if\ all\n\ \ \ \ \ \ \ \ \ locations\ around\ are\ full.\n
comment5.params=x\ y
comment5.target=java.util.Iterator\ adjacentLocations(int,\ int)
comment5.text=\n\ Generate\ an\ iterator\ over\ a\ shuffled\ list\ of\ locations\ adjacent\n\ to\ the\ given\ one.\ The\ list\ will\ not\ include\ the\ location\ itself.\n\ All\ locations\ will\ lie\ within\ the\ grid.\n\ @param\ location\ The\ location\ from\ which\ to\ generate\ adjacencies.\n\ @return\ An\ iterator\ over\ locations\ adjacent\ to\ that\ given.\n
numComments=6
