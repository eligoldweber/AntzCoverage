#BlueJ class context
comment0.params=animalSize\ maxAge\ reproductionAge
comment0.target=Animal(int,\ int,\ int)
comment0.text=\nAnimal\ contructor\n\n\n
comment1.target=int\ getMaxAge()
comment10.params=upDown
comment10.target=int\ getNewY(int)
comment10.text=\ngetNewY\ -\ Translate\ the\ Up,\ Down,\ and\ Stay\ Put\ directive\ into\ a\ new\ value\ for\ the\ \nY\ coordinate.\n\n@param\ \ upDown\:\ a\ 3-valued\ int\:\ Up,\ Down,\ or\ Stay\n@return\ \ \ \ \ the\ new\ Y\ coordinate.\n\n
comment2.target=boolean\ isAlive()
comment2.text=\nisAlive\ -\ get\ method\ to\ learn\ if\ the\ animal\ is\ alive\n\n\n
comment3.target=void\ incrementAge()
comment3.text=\nincrementAge\n\n\n
comment4.target=void\ decrementHealth()
comment4.text=\ndecrementHealth\n\n\n
comment5.target=void\ act()
comment5.text=\nAct\ -\ do\ whatever\ the\ Animal\ wants\ to\ do.\ This\ method\ is\ called\ whenever\nthe\ 'Act'\ or\ 'Run'\ button\ gets\ pressed\ in\ the\ environment.\n\n
comment6.params=leftRight\ upDown
comment6.target=void\ moveWithWrap(int,\ int)
comment6.text=\nMoveWithWrap\ -\ move\ the\ current\ object\ in\ the\ indicated\ direction\:\ \nConsider\ the\ 8\ adjacent\ squares\ (and\ the\ current\ square).\ \ The\ parameters\ indicate\nby\ way\ of\ two\ 3-way\ variables\ which\ adjacent\ square\ to\ move\ into.\ \ This\ function\ allows\n"wrapping"\ around\ the\ world\ in\ a\ torus\ fashion.\ \ Finally,\ after\ the\ new\ coordinates\ have\ \nbeen\ computed,\ the\ move\ is\ only\ made\ if\ the\ square\ to\ be\ moved\ into\ does\ not\ contain\ a\ \nbarrier\n\n@param\ \ leftRight\:\ a\ 3-state\ variable\ indicating\ left,\ right,\ or\ stay\ put\nupDonw\:\ a\ 3-state\ variable\ indicating\ up,\ down,\ or\ stay\ put.\n\n\n
comment7.params=leftRight\ upDown
comment7.target=void\ moveWithoutWrap(int,\ int)
comment7.text=\nMoveWithoutWrap\ -\ move\ the\ current\ object\ in\ the\ indicated\ direction\:\ \nConsider\ the\ 8\ adjacent\ squares\ (and\ the\ current\ square).\ \ The\ parameters\ indicate\nby\ way\ of\ two\ 3-way\ variables\ which\ adjacent\ square\ to\ move\ into.\ \ This\ function\ does\ not\nallow\ "wrapping"\ around\ the\ world\ in\ a\ torus\ fashion.\ \ Any\ attempt\ to\ move\ beyond\ the\ world's\ \nbounaries\ is\ considered\ a\ no-op.\ \ Finally,\ after\ the\ new\ coordinates\ have\ \nbeen\ computed,\ the\ move\ is\ only\ made\ if\ the\ square\ to\ be\ moved\ into\ does\ not\ contain\ a\ \nbarrier\n\n@param\ \ leftRight\:\ a\ 3-state\ variable\ indicating\ left,\ right,\ or\ stay\ put\nupDonw\:\ a\ 3-state\ variable\ indicating\ up,\ down,\ or\ stay\ put.\n\n\n
comment8.params=newX\ newY
comment8.target=void\ moveIfAllowed(int,\ int)
comment8.text=\nMoveIfAllowed\ -\ Given\ a\ set\ of\ coordinates\ move\ the\ current\ object\ to\ the\ new\ location\ \nif\ and\ only\ if\ the\ new\ location\ is\ not\ currently\ occupied\ by\ a\ barrier\ (i.e.\ an\ instance\ of\nthe\ Rock\ class.\n\n@param\ \ newX\ -\ the\ new\ X\ coordinate\nnewY\ -\ the\ new\ Y\ coordinate\n\n
comment9.params=leftRight
comment9.target=int\ getNewX(int)
comment9.text=\ngetNewX\ -\ Translate\ the\ Left,\ Right,\ Stay\ Put\ directive\ into\ a\ new\ value\ for\ the\ \nX\ coordinate.\n\n@param\ \ leftRight\:\ a\ 3-valued\ int\:\ Left,\ Right,\ or\ Stay\n@return\ \ \ \ \ the\ new\ X\ coordinate.\n\n
numComments=11
